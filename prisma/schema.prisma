// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
}

// ENUMs
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum CandidateBatchStatus {
  PENDING_PROCESSING
  IN_PROGRESS
  ADMIN_APPROVAL_PENDING
  PROCESSED
}

enum BatchPaymentStatus {
  PENDING
  PAID
}

enum CandidateRejectType {
  REJECT
  IGNORE
}

enum CandidateRejectReason {
  MANDATORY
  DUPLICATE
  WRONG_INPUT
  LENGTH_EXCEEDED
  CONSENT_DECLINED
}

enum CandidateRejectBy {
  SYSTEM
  USER
}

enum CandidateConsent {
  PENDING
  DECLINED
  RECEIVED
}

enum TrainingType {
  TRAINING
  CERTIFICATE
  OTHER
}

enum AgentStatus {
  PENDING
  REGISTERED
}

enum CustomerStatus {
  PENDING
  VERIFIED
}

enum CallStatus {
  BUSY
  CALL_BACK
  COMPLETED
  DISCONNECTED
  HALF_DETAILS
  NOT_INTERESTED
  NOT_REACHABLE
  RINGING
  SWITCH_OFF
  WRONG_NO
}

enum Language {
  ASSAMESE
  BENGALI
  BHOJPURI
  ENGLISH
  GUJARATI
  HINDI
  KANNADA
  MAITHILI
  MALAYALAM
  MARATHI
  ODIA
  PUNJABI
  SANSKRIT
  SANTALI
  TAMIL
  TELUGU
  URDU
}

enum SMSReason {
  CANDIDATE_REGISTERED
}

enum EmailReason {
  ADMIN_REGISTERED
  AGENT_REGISTERED
  BATCH_PROCESSED
  FORGOT_PASSWORD_REQUESTED
  FORGOT_PASSWORD_PROCESSED
  RESET_PASSWORD_PROCESSED
}

enum CandidateStatus {
  SYSTEM_VERIFIED
  VERIFICATION_IN_PROGRESS
  OTHER_UPDATE_PENDING
  APPROVAL_PENDING
  APPROVED
  REJECTED
  INACTIVE
}

enum CompanyInquiryStatus {
  PENDING
  IN_PROGRESS
  PROCESSEDS
}

enum CandidateInquiryStatus {
  PENDING
  IN_PROGRESS
  PROCESSEDS
}

// Models

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(80)
  description    String?          @db.VarChar(200)
  displayName    String           @db.VarChar(40)
  group          String           @db.VarChar(50)
  isActive       Boolean          @default(true)
  createdOn      DateTime         @default(now())
  modifiedOn     DateTime         @updatedAt
  RolePermission RolePermission[]
}

model Role {
  id                Int              @id @default(autoincrement())
  name              String           @unique @db.VarChar(40)
  description       String?          @db.VarChar(200)
  isSystemGenerated Boolean          @default(false)
  uuid              String           @unique @default(uuid())
  isActive          Boolean          @default(true)
  createdOn         DateTime         @default(now())
  modifiedOn        DateTime         @updatedAt
  UserLogin         UserLogin[]
  createdBy         Int?
  CreatedBy         UserLogin?       @relation("createdByRoleToUserLogin", fields: [createdBy], references: [id])
  modifiedBy        Int?
  ModifiedBy        UserLogin?       @relation("modifiedByRoleToUserLogin", fields: [modifiedBy], references: [id])
  RolePermission    RolePermission[]
}

model User {
  id            Int        @id @default(autoincrement())
  fullName      String     @db.VarChar(200)
  dob           DateTime?  @db.Date
  gender        Gender?
  permAddress   String?    @db.VarChar(500)
  permCity      String?    @db.VarChar(45)
  permState     String?    @db.VarChar(45)
  permCountry   String?    @db.VarChar(45)
  permZip       String?    @db.VarChar(10)
  currAddress   String?    @db.VarChar(500)
  currCity      String?    @db.VarChar(45)
  currState     String?    @db.VarChar(45)
  currCountry   String?    @db.VarChar(45)
  currZip       String?    @db.VarChar(10)
  panCard       String?    @unique @db.VarChar(20)
  aadharCard    String?    @unique @db.VarChar(15)
  primaryLang   String?    @db.VarChar(30)
  secondaryLang String?    @db.VarChar(30)
  thirdLang     String?    @db.VarChar(30)
  profileImage  String?    @db.VarChar(500)
  note          String?    @db.VarChar(500)
  uuid          String     @default(uuid())
  isActive      Boolean    @default(true)
  createdOn     DateTime   @default(now())
  modifiedOn    DateTime   @updatedAt
  UserLogin     UserLogin?
  createdBy     Int?
  CreatedBy     UserLogin? @relation("createdByUserToUserLogin", fields: [createdBy], references: [id])
  modifiedBy    Int?
  ModifiedBy    UserLogin? @relation("modifiedByUserToUserLogin", fields: [modifiedBy], references: [id])
  Agent         Agent?
}

model UserLogin {
  id                                    Int                           @id @default(autoincrement())
  userId                                Int                           @unique
  User                                  User                          @relation(fields: [userId], references: [id])
  roleId                                Int
  Role                                  Role                          @relation(fields: [roleId], references: [id])
  email                                 String                        @unique @db.VarChar(80)
  contactNo                             String?                       @unique @db.VarChar(20)
  passwordHash                          String                        @db.VarChar(200)
  isSystemGenerated                     Boolean                       @default(false)
  resetToken                            String?                       @db.VarChar(500)
  resetExpires                          DateTime?
  createdOn                             DateTime                      @default(now())
  modifiedOn                            DateTime                      @updatedAt
  createdBy                             Int?
  CreatedBy                             UserLogin?                    @relation("createdByUserLoginToUserLogin", fields: [createdBy], references: [id])
  UserLoginCreatedBy                    UserLogin[]                   @relation("createdByUserLoginToUserLogin")
  modifiedBy                            Int?
  ModifiedBy                            UserLogin?                    @relation("modifiedByUserLoginToUserLogin", fields: [modifiedBy], references: [id])
  UserLoginModifiedBy                   UserLogin[]                   @relation("modifiedByUserLoginToUserLogin")
  RoleCreatedBy                         Role[]                        @relation("createdByRoleToUserLogin")
  RoleModifiedBy                        Role[]                        @relation("modifiedByRoleToUserLogin")
  RolePermissionCreatedBy               RolePermission[]              @relation("createdByRolePermissionToUserLogin")
  RolePermissionModifiedBy              RolePermission[]              @relation("modifiedByRolePermissionToUserLogin")
  UserCreatedBy                         User[]                        @relation("createdByUserToUserLogin")
  UserModifiedBy                        User[]                        @relation("modifiedByUserToUserLogin")
  IndustryCreatedBy                     Industry[]                    @relation("createdByIndustryToUserLogin")
  IndustryModifiedBy                    Industry[]                    @relation("modifiedByIndustryToUserLogin")
  SkillCreatedBy                        Skill[]                       @relation("createdBySkillToUserLogin")
  SkillModifiedBy                       Skill[]                       @relation("modifiedBySkillToUserLogin")
  SubscriptionCreatedBy                 Subscription[]                @relation("createdBySubscriptionToUserLogin")
  SubscriptionModifiedBy                Subscription[]                @relation("modifiedBySubscriptionToUserLogin")
  CandidateUploadBatchCreatedBy         CandidateUploadBatch[]        @relation("createdByCandidateUploadBatchToUserLogin")
  CandidateUploadBatchModifiedBy        CandidateUploadBatch[]        @relation("modifiedByCandidateUploadBatchToUserLogin")
  CandidateRawCreatedBy                 CandidateRaw[]                @relation("createdByCandidateRawToUserLogin")
  CandidateRawModifiedBy                CandidateRaw[]                @relation("modifiedByCandidateRawToUserLogin")
  CandidateRejectionSummary             CandidateRejectionSummary[]
  CandidateRejectionSummaryCreatedBy    CandidateRejectionSummary[]   @relation("createdByCandidateRejectionSummaryToUserLogin")
  CandidateRejectionSummaryModifiedBy   CandidateRejectionSummary[]   @relation("modifiedByCandidateRejectionSummaryToUserLogin")
  CandidateVersioningCreatedBy          CandidateVersioning[]         @relation("createdByCandidateVersioningToUserLogin")
  CandidateVersioningModifiedBy         CandidateVersioning[]         @relation("modifiedByCandidateVersioningToUserLogin")
  CandidateCallCentreHistoryCreatedBy   CandidateCallCentreHistory[]  @relation("createdByCandidateCallCentreHistoryToUserLogin")
  CandidateCallCentreHistoryModifiedBy  CandidateCallCentreHistory[]  @relation("modifiedByCandidateCallCentreHistoryToUserLogin")
  CandidateCreatedBy                    Candidate[]                   @relation("createdByCandidateToUserLogin")
  CandidateModifiedBy                   Candidate[]                   @relation("modifiedByCandidateToUserLogin")
  CandidateApprovedBy                   Candidate[]                   @relation("approvedByCandidateToUserLogin")
  CategoryCreatedBy                     Category[]                    @relation("createdByCategoryToUserLogin")
  CategoryModifiedBy                    Category[]                    @relation("modifiedByCategoryToUserLogin")
  AgentCreatedBy                        Agent[]                       @relation("createdByAgentToUserLogin")
  AgentModifiedBy                       Agent[]                       @relation("modifiedByAgentToUserLogin")
  CustomerCreatedBy                     Customer[]                    @relation("createdByCustomerToUserLogin")
  CustomerModifiedBy                    Customer[]                    @relation("modifiedByCustomerToUserLogin")
  CustomerLoginCreatedBy                CustomerLogin[]               @relation("createdByCustomerLoginToUserLogin")
  CustomerLoginModifiedBy               CustomerLogin[]               @relation("modifiedByCustomerLoginToUserLogin")
  CustomerSubscriptionCreatedBy         CustomerSubscription[]        @relation("createdByCustomerSubscriptionToUserLogin")
  CustomerSubscriptionModifiedBy        CustomerSubscription[]        @relation("modifiedByCustomerSubscriptionToUserLogin")
  CustomerTokenCreatedBy                CustomerToken[]               @relation("createdByCustomerTokenToUserLogin")
  CustomerTokenModifiedBy               CustomerToken[]               @relation("modifiedByCustomerTokenToUserLogin")
  CompanyCreatedBy                      Company[]                     @relation("createdByCompanyToUserLogin")
  CompanyModifiedBy                     Company[]                     @relation("modifiedByCompanyToUserLogin")
  CandidateWorkHistoryCreatedBy         CandidateWorkHistory[]        @relation("createdByCandidateWorkHistory")
  CandidateWorkHistoryModifiedBy        CandidateWorkHistory[]        @relation("modifiedByCandidateWorkHistory")
  SkillOnCandidateWorkHistoryCreatedBy  SkillOnCandidateWorkHistory[] @relation("createdBySkillOnCandidateWorkHistoryToUserLogin")
  SkillOnCandidateWorkHistoryModifiedBy SkillOnCandidateWorkHistory[] @relation("modifiedBySkillOnCandidateWorkHistoryToUserLogin")
  AgentPricingTemplateCreatedBy         AgentPricingTemplate[]        @relation("createdByAgentPricingTemplateToUserLogin")
  AgentPricingTemplateModifiedBy        AgentPricingTemplate[]        @relation("modifiedByAgentPricingTemplateToUserLogin")
  CandidateIndustryCreatedBy            CandidateIndustry[]           @relation("createdByCandidateIndustry")
  CandidateIndustryModifiedBy           CandidateIndustry[]           @relation("modifiedByCandidateIndustry")
  CandidateCategoryCreatedBy            CandidateCategory[]           @relation("createdByCandidateCategory")
  CandidateCategoryModifiedBy           CandidateCategory[]           @relation("modifiedByCandidateCategory")
  SMSLogCreatedBy                       SMSLog[]                      @relation("createdBySMSLog")
  SMSLogModifiedBy                      SMSLog[]                      @relation("modifiedBySMSLog")
  EmailLogCreatedBy                     EmailLog[]                    @relation("createdByEmailLog")
  EmailLogModifiedBy                    EmailLog[]                    @relation("modifiedByEmailLog")
  CandidateVerificationCreatedBy        CandidateVerification[]       @relation("createdByCandidateVerification")
  CandidateVerificationModifiedBy       CandidateVerification[]       @relation("modifiedByCandidateVerification")
  CandidateUploadBatchUploadedBy        CandidateUploadBatch[]        @relation("uploadedByCandidateUploadBatch")
  BatchPriority                         BatchPriority[]
  BatchPriorityCreatedBy                BatchPriority[]               @relation("createdByBatchPriority")
  BatchPriorityModifiedBy               BatchPriority[]               @relation("modifiedByBatchPriority")
  CompanyInquiryCreatedBy               CompanyInquiry[]              @relation("createdByCompanyInquiry")
  CompanyInquiryModifiedBy              CompanyInquiry[]              @relation("modifiedByCompanyInquiry")
  CandidateInquiryCreatedBy             CandidateInquiry[]            @relation("createdByCandidateInquiry")
  CandidateInquiryModifiedBy            CandidateInquiry[]            @relation("modifiedByCandidateInquiry")
  EmailTemplateCreatedBy                EmailTemplate[]               @relation("createdByEmailTemplate")
  EmailTemplateModifiedBy               EmailTemplate[]               @relation("modifiedByEmailTemplate")
  CandidateTrainingCreatedBy            CandidateTraining[]           @relation("createdByCandidateTraining")
  CandidateTrainingModifiedBy           CandidateTraining[]           @relation("modifiedByCandidateTraining")

  CandidateTraining CandidateTraining[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  Role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int
  Permission   Permission @relation(fields: [permissionId], references: [id])
  createdOn    DateTime   @default(now())
  modifiedOn   DateTime   @updatedAt
  createdBy    Int?
  CreatedBy    UserLogin? @relation("createdByRolePermissionToUserLogin", fields: [createdBy], references: [id])
  modifiedBy   Int?
  ModifiedBy   UserLogin? @relation("modifiedByRolePermissionToUserLogin", fields: [modifiedBy], references: [id])
}

model Industry {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique @db.VarChar(80)
  description          String?                @db.VarChar(100)
  isActive             Boolean                @default(true)
  createdOn            DateTime               @default(now())
  modifiedOn           DateTime               @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?             @relation("createdByIndustryToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?             @relation("modifiedByIndustryToUserLogin", fields: [modifiedBy], references: [id])
  Company              Company[]
  CandidateIndustry    CandidateIndustry[]
  CandidateWorkHistory CandidateWorkHistory[]
}

model Skill {
  id                   Int                           @id @default(autoincrement())
  title                String                        @unique @db.VarChar(45)
  description          String?                       @db.VarChar(100)
  isActive             Boolean                       @default(true)
  createdOn            DateTime                      @default(now())
  modifiedOn           DateTime                      @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?                    @relation("createdBySkillToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?                    @relation("modifiedBySkillToUserLogin", fields: [modifiedBy], references: [id])
  CandidateWorkHistory SkillOnCandidateWorkHistory[]
  CandidateTraining    CandidateTraining[]
}

model Subscription {
  id             Int        @id @default(autoincrement())
  planName       String     @unique @db.VarChar(40)
  dataCount      Int        @default(0)
  durationMonths Int        @default(0)
  price          Float      @default(0)
  note           String?    @db.VarChar(200)
  isActive       Boolean    @default(true)
  createdOn      DateTime   @default(now())
  modifiedOn     DateTime   @updatedAt
  createdBy      Int?
  CreatedBy      UserLogin? @relation("createdBySubscriptionToUserLogin", fields: [createdBy], references: [id])
  modifiedBy     Int?
  ModifiedBy     UserLogin? @relation("modifiedBySubscriptionToUserLogin", fields: [modifiedBy], references: [id])
}

model CandidateUploadBatch {
  id                   Int                   @id @default(autoincrement())
  timestamp            DateTime
  count                Int
  status               CandidateBatchStatus  @default(PENDING_PROCESSING)
  approvedCount        Int?
  rejectedCount        Int?
  paymentAmount        Float?
  paymentStatus        BatchPaymentStatus?
  paymentDate          DateTime?             @db.Date
  paymentRemarks       String?               @db.VarChar(200)
  createdOn            DateTime              @default(now())
  modifiedOn           DateTime              @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?            @relation("createdByCandidateUploadBatchToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?            @relation("modifiedByCandidateUploadBatchToUserLogin", fields: [modifiedBy], references: [id])
  uploadedBy           Int?
  UploadedBy           UserLogin?            @relation("uploadedByCandidateUploadBatch", fields: [uploadedBy], references: [id])
  CandidateRaw         CandidateRaw[]
  agentPricingTemplate Int?
  AgentPricingTemplate AgentPricingTemplate? @relation(fields: [agentPricingTemplate], references: [id])
  BatchPriority        BatchPriority[]
}

model CandidateRaw {
  id                        Int                         @id @default(autoincrement())
  industry                  String?                     @db.Text
  category                  String?                     @db.Text
  fullName                  String?                     @db.Text
  dob                       String?                     @db.Text
  gender                    String?                     @db.Text
  permAddress               String?                     @db.Text
  permCity                  String?                     @db.Text
  permState                 String?                     @db.Text
  permCountry               String?                     @db.Text
  permZip                   String?                     @db.Text
  currAddress               String?                     @db.Text
  currCity                  String?                     @db.Text
  currState                 String?                     @db.Text
  currCountry               String?                     @db.Text
  currZip                   String?                     @db.Text
  email1                    String?                     @db.Text
  email2                    String?                     @db.Text
  contactNo1                String?                     @db.Text
  contactNo2                String?                     @db.Text
  aadharNo                  String?                     @db.Text
  panNo                     String?                     @db.Text
  dlNo                      String?                     @db.Text
  expYears                  String?                     @db.Text
  expMonths                 String?                     @db.Text
  prefLocation1             String?                     @db.Text
  prefLocation2             String?                     @db.Text
  prefLocation3             String?                     @db.Text
  skill1                    String?                     @db.Text
  skill2                    String?                     @db.Text
  primaryLang               String?                     @db.Text
  secondaryLang             String?                     @db.Text
  thirdLang                 String?                     @db.Text
  lastCompany               String?                     @db.Text
  designation               String?                     @db.Text
  startDate                 String?                     @db.Text
  endDate                   String?                     @db.Text
  jobDescription            String?                     @db.Text
  education                 String?                     @db.Text
  rowNum                    Int
  batchId                   Int
  BatchId                   CandidateUploadBatch        @relation(fields: [batchId], references: [id])
  isSystemApproved          Boolean
  createdOn                 DateTime                    @default(now())
  modifiedOn                DateTime                    @updatedAt
  createdBy                 Int?
  CreatedBy                 UserLogin?                  @relation("createdByCandidateRawToUserLogin", fields: [createdBy], references: [id])
  modifiedBy                Int?
  ModifiedBy                UserLogin?                  @relation("modifiedByCandidateRawToUserLogin", fields: [modifiedBy], references: [id])
  CandidateRejectionSummary CandidateRejectionSummary[]
  CandidateVersioning       CandidateVersioning[]
  Candidate                 Candidate?
}

model CandidateRejectionSummary {
  id              Int                   @id @default(autoincrement())
  columnName      String                @db.VarChar(40)
  rejectionType   CandidateRejectType
  rejectionReason CandidateRejectReason
  rejectedBy      CandidateRejectBy
  rejectById      Int?
  RejectedById    UserLogin?            @relation(fields: [rejectById], references: [id])
  candidateRawId  Int
  CandidateRawId  CandidateRaw          @relation(fields: [candidateRawId], references: [id])
  createdOn       DateTime              @default(now())
  modifiedOn      DateTime              @updatedAt
  createdBy       Int?
  CreatedBy       UserLogin?            @relation("createdByCandidateRejectionSummaryToUserLogin", fields: [createdBy], references: [id])
  modifiedBy      Int?
  ModifiedBy      UserLogin?            @relation("modifiedByCandidateRejectionSummaryToUserLogin", fields: [modifiedBy], references: [id])
}

model CandidateVersioning {
  id                         Int                          @id @default(autoincrement())
  industry                   String?                      @db.VarChar(80)
  currIndustry               String?                      @db.VarChar(80)
  newIndustry                String?                      @db.VarChar(80)
  category                   String                       @db.VarChar(80)
  currCategory               String?                      @db.VarChar(80)
  newCategory                String?                      @db.VarChar(80)
  fullName                   String                       @db.VarChar(200)
  dob                        DateTime?                    @db.Date
  gender                     Gender?
  permAddress                String?                      @db.VarChar(500)
  permCity                   String?                      @db.VarChar(45)
  permState                  String?                      @db.VarChar(45)
  permCountry                String?                      @db.VarChar(45)
  permZip                    String?                      @db.VarChar(10)
  currAddress                String?                      @db.VarChar(500)
  currCity                   String                       @db.VarChar(45)
  currState                  String?                      @db.VarChar(45)
  currCountry                String?                      @db.VarChar(45)
  currZip                    String?                      @db.VarChar(10)
  email1                     String?                      @db.VarChar(80)
  email2                     String?                      @db.VarChar(80)
  contactNo1                 String                       @db.VarChar(45)
  contactNo2                 String?                      @db.VarChar(45)
  aadharNo                   String?                      @db.VarChar(15)
  panNo                      String?                      @db.VarChar(12)
  dlNo                       String?                      @db.VarChar(20)
  registrationStatus         String?                      @db.VarChar(15)
  expYears                   Int?
  expMonths                  Int?
  preferLocation1            String?                      @db.VarChar(80)
  preferLocation2            String?                      @db.VarChar(80)
  preferLocation3            String?                      @db.VarChar(80)
  skill1                     String?                      @db.VarChar(45)
  skill2                     String?                      @db.VarChar(45)
  primaryLanguage            String?                      @db.VarChar(30)
  secondaryLanguage          String?                      @db.VarChar(30)
  thirdLanguage              String?                      @db.VarChar(30)
  lastCompany                String?                      @db.VarChar(100)
  designation                String?                      @db.VarChar(80)
  startDate                  DateTime?                    @db.Date
  endDate                    DateTime?                    @db.Date
  jobDescription             String?                      @db.VarChar(200)
  education                  String?                      @db.VarChar(50)
  candidateRawId             Int
  CandidateRawId             CandidateRaw                 @relation(fields: [candidateRawId], references: [id])
  version                    Int
  createdOn                  DateTime                     @default(now())
  modifiedOn                 DateTime                     @updatedAt
  createdBy                  Int?
  CreatedBy                  UserLogin?                   @relation("createdByCandidateVersioningToUserLogin", fields: [createdBy], references: [id])
  modifiedBy                 Int?
  ModifiedBy                 UserLogin?                   @relation("modifiedByCandidateVersioningToUserLogin", fields: [modifiedBy], references: [id])
  CandidateCallCentreHistory CandidateCallCentreHistory[]
}

model CandidateCallCentreHistory {
  id                    Int                  @id @default(autoincrement())
  candidateVersioningId Int?
  CandidateVersioningId CandidateVersioning? @relation(fields: [candidateVersioningId], references: [id])
  candidateId           Int?
  CandidateId           Candidate?           @relation(fields: [candidateId], references: [id])
  callStatus            CallStatus?
  comment               String?              @db.VarChar(500)
  candidateConsent      CandidateConsent     @default(PENDING)
  isSubmitted           Boolean              @default(false)
  industry              Boolean?
  category              Boolean?
  fullName              Boolean?
  dob                   Boolean?
  gender                Boolean?
  permAddress           Boolean?
  permCity              Boolean?
  permState             Boolean?
  permCountry           Boolean?
  permZip               Boolean?
  currAddress           Boolean?
  currCity              Boolean?
  currState             Boolean?
  currCountry           Boolean?
  currZip               Boolean?
  email1                Boolean?
  email2                Boolean?
  contactNo1            Boolean?
  contactNo2            Boolean?
  aadharNo              Boolean?
  panNo                 Boolean?
  dlNo                  Boolean?
  registrationStatus    Boolean?
  expYears              Boolean?
  expMonths             Boolean?
  preferLocation1       Boolean?
  preferLocation2       Boolean?
  preferLocation3       Boolean?
  skill1                Boolean?
  skill2                Boolean?
  primaryLanguage       Boolean?
  secondaryLanguage     Boolean?
  thirdLanguage         Boolean?
  lastCompany           Boolean?
  designation           Boolean?
  startDate             Boolean?
  endDate               Boolean?
  jobDescription        Boolean?
  education             Boolean?
  createdOn             DateTime             @default(now())
  modifiedOn            DateTime             @updatedAt
  createdBy             Int?
  CreatedBy             UserLogin?           @relation("createdByCandidateCallCentreHistoryToUserLogin", fields: [createdBy], references: [id])
  modifiedBy            Int?
  ModifiedBy            UserLogin?           @relation("modifiedByCandidateCallCentreHistoryToUserLogin", fields: [modifiedBy], references: [id])
}

model Candidate {
  id                         Int                          @id @default(autoincrement())
  candidateRawid             Int?                         @unique
  CandidateRawId             CandidateRaw?                @relation(fields: [candidateRawid], references: [id])
  fullName                   String                       @db.VarChar(100)
  dob                        DateTime?                    @db.Date
  gender                     Gender?
  permAddress                String?                      @db.VarChar(500)
  permCity                   String?                      @db.VarChar(45)
  permState                  String?                      @db.VarChar(45)
  permCountry                String?                      @db.VarChar(45)
  permZip                    String?                      @db.VarChar(6)
  currAddress                String?                      @db.VarChar(500)
  currCity                   String                       @db.VarChar(45)
  currState                  String?                      @db.VarChar(45)
  currCountry                String?                      @db.VarChar(45)
  currZip                    String?                      @db.VarChar(6)
  email1                     String?                      @unique @db.VarChar(80)
  email2                     String?                      @db.VarChar(80)
  contactNo1                 String                       @unique @db.VarChar(45)
  contactNo2                 String?                      @db.VarChar(45)
  aadharNo                   String?                      @unique @db.VarChar(12)
  panNo                      String?                      @unique @db.VarChar(12)
  dlNo                       String?                      @unique @db.VarChar(20)
  expYears                   Int?
  preferLocation1            String?                      @db.VarChar(80)
  preferLocation2            String?                      @db.VarChar(80)
  skill1                     String?                      @db.VarChar(45)
  skill2                     String?                      @db.VarChar(45)
  profImgPath                String?                      @db.VarChar(500)
  primaryLanguage            Language?
  secondaryLanguage          Language?
  thirdLanguage              String?                      @db.VarChar(30)
  education                  String?                      @db.VarChar(40)
  note                       String?                      @db.VarChar(500)
  status                     CandidateStatus              @default(INACTIVE)
  costToAgent                Float?                       @default(0)
  passwordHash               String?                      @db.VarChar(200)
  isActive                   Boolean                      @default(true)
  createdOn                  DateTime                     @default(now())
  modifiedOn                 DateTime                     @updatedAt
  approvedOn                 DateTime?
  createdBy                  Int?
  CreatedBy                  UserLogin?                   @relation("createdByCandidateToUserLogin", fields: [createdBy], references: [id])
  modifiedBy                 Int?
  ModifiedBy                 UserLogin?                   @relation("modifiedByCandidateToUserLogin", fields: [modifiedBy], references: [id])
  approvedBy                 Int?
  ApprovedBy                 UserLogin?                   @relation("approvedByCandidateToUserLogin", fields: [modifiedBy], references: [id])
  CandidateWorkHistory       CandidateWorkHistory[]
  CandidateIndustry          CandidateIndustry[]
  CandidateCategory          CandidateCategory[]
  CandidateCallCentreHistory CandidateCallCentreHistory[]
  CandidateVerification      CandidateVerification?
  CandidateTraining          CandidateTraining?
}

model CandidateIndustry {
  id          Int        @id @default(autoincrement())
  candidateId Int
  CandidateId Candidate  @relation(fields: [candidateId], references: [id])
  industryId  Int
  IndustryId  Industry   @relation(fields: [industryId], references: [id])
  title       String?    @db.VarChar(80)
  createdOn   DateTime   @default(now())
  modifiedOn  DateTime   @updatedAt
  createdBy   Int?
  CreatedBy   UserLogin? @relation("createdByCandidateIndustry", fields: [createdBy], references: [id])
  modifiedBy  Int?
  ModifiedBy  UserLogin? @relation("modifiedByCandidateIndustry", fields: [modifiedBy], references: [id])
}

model CandidateCategory {
  id          Int        @id @default(autoincrement())
  candidateId Int
  CandidateId Candidate  @relation(fields: [candidateId], references: [id])
  categoryId  Int
  CategoryId  Category   @relation(fields: [categoryId], references: [id])
  title       String?    @db.VarChar(80)
  createdOn   DateTime   @default(now())
  modifiedOn  DateTime   @updatedAt
  createdBy   Int?
  CreatedBy   UserLogin? @relation("createdByCandidateCategory", fields: [createdBy], references: [id])
  modifiedBy  Int?
  ModifiedBy  UserLogin? @relation("modifiedByCandidateCategory", fields: [modifiedBy], references: [id])
}

model Category {
  id                   Int                    @id @default(autoincrement())
  title                String                 @unique @db.VarChar(80)
  description          String?                @db.VarChar(100)
  isActive             Boolean                @default(true)
  createdOn            DateTime               @default(now())
  modifiedOn           DateTime               @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?             @relation("createdByCategoryToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?             @relation("modifiedByCategoryToUserLogin", fields: [modifiedBy], references: [id])
  CandidateCategory    CandidateCategory[]
  CandidateWorkHistory CandidateWorkHistory[]
}

model Agent {
  id                 Int          @id @default(autoincrement())
  userId             Int          @unique
  UserId             User         @relation(fields: [userId], references: [id])
  agentNo            String?      @db.VarChar(15)
  professionalStatus String?      @db.VarChar(40)
  gstin              String?      @unique @db.VarChar(20)
  companyName        String?      @db.VarChar(100)
  bankName           String?      @db.VarChar(100)
  bankAc             String?      @db.VarChar(30)
  bankIfsc           String?      @db.VarChar(20)
  bankAcType         String?      @db.VarChar(20)
  workLocation1      String?      @db.VarChar(60)
  workLocation2      String?      @db.VarChar(60)
  panCardPath        String?      @db.VarChar(500)
  docPoitype         String?      @db.VarChar(30)
  docPoiValue        String?      @db.VarChar(30)
  docPoiPath         String?      @db.VarChar(500)
  docPoatype         String?      @db.VarChar(30)
  docPoaValue        String?      @db.VarChar(30)
  docPoaPath         String?      @db.VarChar(500)
  docBanktype        String?      @db.VarChar(30)
  docBankValue       String?      @db.VarChar(30)
  docBankPath        String?      @db.VarChar(500)
  status             AgentStatus?
  createdOn          DateTime     @default(now())
  modifiedOn         DateTime     @updatedAt
  createdBy          Int?
  CreatedBy          UserLogin?   @relation("createdByAgentToUserLogin", fields: [createdBy], references: [id])
  modifiedBy         Int?
  ModifiedBy         UserLogin?   @relation("modifiedByAgentToUserLogin", fields: [modifiedBy], references: [id])
}

model Customer {
  id                   Int                    @id @default(autoincrement())
  fullName             String                 @db.VarChar(200)
  companyName          String?                @db.VarChar(100)
  dob                  DateTime?              @db.Date
  gender               Gender?
  state                String?                @db.VarChar(45)
  country              String?                @db.VarChar(45)
  profileImage         String?                @db.VarChar(500)
  isActive             Boolean                @default(true)
  createdOn            DateTime               @default(now())
  modifiedOn           DateTime               @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?             @relation("createdByCustomerToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?             @relation("modifiedByCustomerToUserLogin", fields: [modifiedBy], references: [id])
  CustomerLogin        CustomerLogin?
  CustomerSubscription CustomerSubscription[]
  CustomerToken        CustomerToken[]
}

model CustomerLogin {
  id            Int            @id @default(autoincrement())
  customerId    Int            @unique
  CustomerId    Customer       @relation(fields: [customerId], references: [id])
  email         String         @unique @db.VarChar(80)
  passwordHash  String         @db.VarChar(200)
  resetToken    String?        @db.VarChar(500)
  resetExpires  DateTime?
  status        CustomerStatus @default(PENDING)
  newEmail      String?        @db.VarChar(80)
  newEmailToken String?        @db.VarChar(500)
  createdOn     DateTime       @default(now())
  modifiedOn    DateTime       @updatedAt
  createdBy     Int?
  CreatedBy     UserLogin?     @relation("createdByCustomerLoginToUserLogin", fields: [createdBy], references: [id])
  modifiedBy    Int?
  ModifiedBy    UserLogin?     @relation("modifiedByCustomerLoginToUserLogin", fields: [modifiedBy], references: [id])
}

model CustomerSubscription {
  id            Int        @id @default(autoincrement())
  customerId    Int
  CustomerId    Customer   @relation(fields: [customerId], references: [id])
  startDate     DateTime   @db.Date
  expiryDate    DateTime   @db.Date
  planName      String?    @db.VarChar(40)
  allocatedData Int
  usedData      Int
  status        String     @db.VarChar(20)
  comment       String?    @db.VarChar(200)
  createdOn     DateTime   @default(now())
  modifiedOn    DateTime   @updatedAt
  createdBy     Int?
  CreatedBy     UserLogin? @relation("createdByCustomerSubscriptionToUserLogin", fields: [createdBy], references: [id])
  modifiedBy    Int?
  ModifiedBy    UserLogin? @relation("modifiedByCustomerSubscriptionToUserLogin", fields: [modifiedBy], references: [id])
}

model CustomerToken {
  id         Int        @id @default(autoincrement())
  customerId Int
  CustomerId Customer   @relation(fields: [customerId], references: [id])
  token      String     @db.VarChar(500)
  createdOn  DateTime   @default(now())
  modifiedOn DateTime   @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin? @relation("createdByCustomerTokenToUserLogin", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin? @relation("modifiedByCustomerTokenToUserLogin", fields: [modifiedBy], references: [id])
}

model Company {
  id          Int        @id @default(autoincrement())
  companyName String     @unique @db.VarChar(100)
  description String?    @db.VarChar(200)
  isActive    Boolean    @default(true)
  industryId  Int?
  IndustryId  Industry?  @relation(fields: [industryId], references: [id])
  createdOn   DateTime   @default(now())
  modifiedOn  DateTime   @updatedAt
  createdBy   Int?
  CreatedBy   UserLogin? @relation("createdByCompanyToUserLogin", fields: [createdBy], references: [id])
  modifiedBy  Int?
  ModifiedBy  UserLogin? @relation("modifiedByCompanyToUserLogin", fields: [modifiedBy], references: [id])
}

model CandidateWorkHistory {
  id            Int        @id @default(autoincrement())
  candidateId   Int
  CandidateId   Candidate  @relation(fields: [candidateId], references: [id])
  company       String?    @db.VarChar(100)
  industryId    Int?
  IndustryId    Industry?  @relation(fields: [industryId], references: [id])
  industryTitle String?    @db.VarChar(80)
  categoryId    Int?
  CategoryId    Category?  @relation(fields: [categoryId], references: [id])
  categoryTitle String?    @db.VarChar(80)
  startDate     DateTime?  @db.Date
  endDate       DateTime?  @db.Date
  description   String?    @db.VarChar(200)
  isEmployed    Boolean?   @default(false)
  createdOn     DateTime   @default(now())
  modifiedOn    DateTime   @updatedAt
  createdBy     Int?
  CreatedBy     UserLogin? @relation("createdByCandidateWorkHistory", fields: [createdBy], references: [id])
  modifiedBy    Int?
  ModifiedBy    UserLogin? @relation("modifiedByCandidateWorkHistory", fields: [modifiedBy], references: [id])
}

model CandidateTraining {
  id          Int        @id @default(autoincrement())
  skillId     Int
  SkillId     Skill?     @relation(fields: [skillId], references: [id])
  candidateId Int        @unique
  CandidateId Candidate  @relation(fields: [candidateId], references: [id])
  type        String?    @db.VarChar(80)
  title        String?    @db.VarChar(80)
  issueDate   DateTime?  @db.Date
  issuedBy    String?    @db.VarChar(80)
  description String?    @db.VarChar(200)
  createdOn   DateTime   @default(now())
  modifiedOn  DateTime   @updatedAt
  createdBy   Int?
  CreatedBy   UserLogin? @relation(fields: [createdBy], references: [id], name: "createdByCandidateTraining")
  modifiedBy  Int?
  ModifiedBy  UserLogin? @relation(fields: [modifiedBy], references: [id], name: "modifiedByCandidateTraining")
  UserLogin   UserLogin? @relation(fields: [userLoginId], references: [id])
  userLoginId Int?
}

model SkillOnCandidateWorkHistory {
  id         Int        @id @default(autoincrement())
  skillId    Int
  SkillId    Skill      @relation(fields: [skillId], references: [id])
  createdOn  DateTime   @default(now())
  modifiedOn DateTime   @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin? @relation("createdBySkillOnCandidateWorkHistoryToUserLogin", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin? @relation("modifiedBySkillOnCandidateWorkHistoryToUserLogin", fields: [modifiedBy], references: [id])
}

model AgentPricingTemplate {
  id                   Int                    @id @default(autoincrement())
  templateName         String                 @unique @db.VarChar(30)
  description          String?                @db.VarChar(100)
  approvalRemarks      String?                @db.VarChar(200)
  isActive             Boolean                @default(false)
  industry             Float                  @default(0)
  category             Float                  @default(0)
  education            Float                  @default(0)
  fullName             Float                  @default(0)
  dob                  Float                  @default(0)
  currCity             Float                  @default(0)
  currZip              Float                  @default(0)
  email1               Float                  @default(0)
  contactNo1           Float                  @default(0)
  expYears             Float                  @default(0)
  preferLocation1      Float                  @default(0)
  preferLocation2      Float                  @default(0)
  skill1               Float                  @default(0)
  skill2               Float                  @default(0)
  primaryLanguage      Float                  @default(0)
  secondaryLanguage    Float                  @default(0)
  lastCompany          Float                  @default(0)
  designation          Float                  @default(0)
  totalAmount          Float
  createdOn            DateTime               @default(now())
  modifiedOn           DateTime               @updatedAt
  createdBy            Int?
  CreatedBy            UserLogin?             @relation("createdByAgentPricingTemplateToUserLogin", fields: [createdBy], references: [id])
  modifiedBy           Int?
  ModifiedBy           UserLogin?             @relation("modifiedByAgentPricingTemplateToUserLogin", fields: [modifiedBy], references: [id])
  CandidateUploadBatch CandidateUploadBatch[]
}

model SMSLog {
  id         Int        @id @default(autoincrement())
  contactNo  String     @db.VarChar(10)
  fullName   String?    @db.VarChar(100)
  reason     SMSReason
  createdOn  DateTime   @default(now())
  modifiedOn DateTime   @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin? @relation("createdBySMSLog", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin? @relation("modifiedBySMSLog", fields: [modifiedBy], references: [id])
}

model CandidateVerification {
  id                Int        @id @default(autoincrement())
  candidateId       Int        @unique
  CandidateId       Candidate  @relation(fields: [candidateId], references: [id])
  industry          Boolean?
  category          Boolean?
  fullName          Boolean?
  dob               Boolean?
  currCity          Boolean?
  currZip           Boolean?
  email1            Boolean?
  contactNo1        Boolean?
  expYears          Boolean?
  preferLocation1   Boolean?
  preferLocation2   Boolean?
  skill1            Boolean?
  skill2            Boolean?
  primaryLanguage   Boolean?
  secondaryLanguage Boolean?
  education         Boolean?
  lastCompany       Boolean?
  designation       Boolean?
  createdOn         DateTime   @default(now())
  modifiedOn        DateTime   @updatedAt
  createdBy         Int?
  CreatedBy         UserLogin? @relation("createdByCandidateVerification", fields: [createdBy], references: [id])
  modifiedBy        Int?
  ModifiedBy        UserLogin? @relation("modifiedByCandidateVerification", fields: [modifiedBy], references: [id])
}

model BatchPriority {
  id         Int                  @id @default(autoincrement())
  batchId    Int
  BatchId    CandidateUploadBatch @relation(fields: [batchId], references: [id])
  assignedTo Int
  AssignedTo UserLogin            @relation(fields: [assignedTo], references: [id])
  createdOn  DateTime             @default(now())
  modifiedOn DateTime             @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin?           @relation("createdByBatchPriority", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin?           @relation("modifiedByBatchPriority", fields: [modifiedBy], references: [id])
}

model CompanyInquiry {
  id          Int                  @id @default(autoincrement())
  fullName    String               @db.VarChar(100)
  designation String               @db.VarChar(40)
  companyName String               @db.VarChar(80)
  contactNo   String               @db.VarChar(10)
  email       String               @db.VarChar(40)
  query       String               @db.VarChar(500)
  status      CompanyInquiryStatus @default(PENDING)
  comment     String?              @db.VarChar(500)
  createdOn   DateTime             @default(now())
  modifiedOn  DateTime             @updatedAt
  createdBy   Int?
  CreatedBy   UserLogin?           @relation("createdByCompanyInquiry", fields: [createdBy], references: [id])
  modifiedBy  Int?
  ModifiedBy  UserLogin?           @relation("modifiedByCompanyInquiry", fields: [modifiedBy], references: [id])
}

model CandidateInquiry {
  id         Int                    @id @default(autoincrement())
  fullName   String                 @db.VarChar(100)
  contactNo  String                 @db.VarChar(10)
  email      String?                @db.VarChar(40)
  jobType    String?                @db.VarChar(50)
  location   String?                @db.VarChar(80)
  status     CandidateInquiryStatus @default(PENDING)
  comment    String?                @db.VarChar(500)
  createdOn  DateTime               @default(now())
  modifiedOn DateTime               @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin?             @relation("createdByCandidateInquiry", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin?             @relation("modifiedByCandidateInquiry", fields: [modifiedBy], references: [id])
}

model EmailTemplate {
  id         Int        @id @default(autoincrement())
  templateId String     @unique @db.VarChar(10)
  template   String     @db.Text
  note       String?    @db.VarChar(500)
  createdOn  DateTime   @default(now())
  modifiedOn DateTime   @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin? @relation("createdByEmailTemplate", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin? @relation("modifiedByEmailTemplate", fields: [modifiedBy], references: [id])
  EmailLog   EmailLog[]
}

model EmailLog {
  id         Int           @id @default(autoincrement())
  templateId Int
  TemplateId EmailTemplate @relation(fields: [templateId], references: [id])
  emailTo    String        @db.VarChar(80)
  createdOn  DateTime      @default(now())
  modifiedOn DateTime      @updatedAt
  createdBy  Int?
  CreatedBy  UserLogin?    @relation("createdByEmailLog", fields: [createdBy], references: [id])
  modifiedBy Int?
  ModifiedBy UserLogin?    @relation("modifiedByEmailLog", fields: [modifiedBy], references: [id])
}
